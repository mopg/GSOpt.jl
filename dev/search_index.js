var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This section provides detailed documentation for all exported types and functions in GSOpt.jl.","category":"page"},{"location":"api/#Internal-Functions","page":"API Reference","title":"Internal Functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"These functions are used internally by GSOpt.jl but may be useful for understanding how the package works:","category":"page"},{"location":"api/#GSOpt.GPModel","page":"API Reference","title":"GSOpt.GPModel","text":"GPModel <: JuMP.AbstractModel\n\nA model type for geometric programming problems. It extends JuMP's model functionality to handle geometric programming constraints and transformations.\n\nGeometric programs involve:\n\nMinimizing posynomials or maximizing monomials\nSubject to monomial equality constraints (= 1)\nAnd posynomial inequality constraints (â‰¤ 1)\n\nExample\n\nusing GSOpt\n\n# Create a geometric programming model\nmodel = GPModel()\n\n# Add variables (must be positive in geometric programming)\n@variable(model, x >= 1)\n@variable(model, y >= 1)\n\n# Set objective (minimize a posynomial)\n@objective(model, Min, 2x + 3y + 4x*y)\n\n# Add constraints\n@constraint(model, x*y <= 10)  # Posynomial inequality\n@constraint(model, x*y^2 == 20)  # Monomial equality\n\n# Solve the model\noptimize!(model)\n\n# Get results\nvalue(x)\nvalue(y)\nobjective_value(model)\n\n\n\n\n\n","category":"type"},{"location":"api/#GSOpt.VariableInfo","page":"API Reference","title":"GSOpt.VariableInfo","text":"Variable information structure for GP and SP variables.\n\nContains common fields shared between GPVariable and SPVariable.\n\nFields\n\nindex::Int: Unique identifier for the variable within the model\nname::String: Variable name\nlower_bound::Union{Float64,Nothing}: Lower bound (must be positive if specified)\nupper_bound::Union{Float64,Nothing}: Upper bound (must be positive if specified)\nfixed_value::Union{Float64,Nothing}: Fixed value (must be positive if specified)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuMP.dual-Tuple{ConstraintRef}","page":"API Reference","title":"JuMP.dual","text":"JuMP.dual(cref::GPConstraintRef) -> Float64\n\nReturns the dual value (sensitivity) of the constraint.\n\nArguments\n\ncref::GPConstraintRef: The constraint reference\n\nReturns\n\nThe dual value of the constraint\n\nThrows\n\nError if the model has not been solved yet or if dual values are not available\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.is_valid-Tuple{GPModel, GSOpt.GPVariable}","page":"API Reference","title":"JuMP.is_valid","text":"JuMP.is_valid(model::GPModel, var::GPVariable) -> Bool\n\nChecks if a variable belongs to the specified model and is still valid.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.list_of_constraint_types-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.list_of_constraint_types","text":"JuMP.list_of_constraint_types(model::AbstractSpGpModel) -> Vector{Tuple{DataType,DataType}}\n\nReturns a list of constraint types in the model as (functiontype, settype) tuples.\n\nReturns\n\nA vector of tuples where each tuple contains the function type and set type of a constraint\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.name-Tuple{GSOpt.AbstractSPGPVariable}","page":"API Reference","title":"JuMP.name","text":"JuMP.name(v::AbstractSPGPVariable) -> String\n\nReturns the name of the variable.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.num_constraints","page":"API Reference","title":"JuMP.num_constraints","text":"JuMP.num_constraints(model::AbstractSpGpModel, function_type=nothing, set_type=nothing; \n                     count_variable_in_set_constraints::Bool = true) -> Int\n\nReturns the number of constraints in the model.\n\nArguments\n\nmodel::AbstractSpGpModel: The geometric programming model\nfunction_type: Optional type of constraint function to count\nset_type: Optional type of constraint set to count\ncount_variable_in_set_constraints::Bool: Whether to count variable bounds as constraints\n\nReturns\n\nThe number of constraints matching the specified types, or all constraints if no types specified\n\n\n\n\n\n","category":"function"},{"location":"api/#JuMP.num_variables-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.num_variables","text":"JuMP.num_variables(model::AbstractSpGpModel) -> Int\n\nReturns the number of variables in the model.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.object_dictionary-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.object_dictionary","text":"JuMP.object_dictionary(model::AbstractSpGpModel) -> Dict{Symbol,Any}\n\nReturns a dictionary of named objects in the model. This is part of the JuMP interface for models.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.objective_function-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.objective_function","text":"JuMP.objective_function(model::AbstractSpGpModel) -> AbstractGPExpression\n\nReturns the objective function of the model.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.objective_function_type-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.objective_function_type","text":"JuMP.objective_function_type(model::AbstractSpGpModel) -> DataType\n\nReturns the type of the objective function.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.objective_sense-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.objective_sense","text":"JuMP.objective_sense(model::AbstractSpGpModel) -> MOI.OptimizationSense\n\nReturns the optimization sense of the model (minimization or maximization).\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.objective_value-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.objective_value","text":"JuMP.objective_value(model::AbstractSpGpModel) -> Float64\n\nReturns the objective value after optimization.\n\nThrows\n\nError if the model has not been solved yet\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.optimize!-Tuple{GPModel}","page":"API Reference","title":"JuMP.optimize!","text":"JuMP.optimize!(model::GPModel)\n\nSolves the geometric programming model by transforming it to a convex optimization problem in log space.\n\nSteps\n\nTransforms the model to log space\nSolves the transformed model using the specified optimizer\nMaps the solution back to the original variables\n\nThrows\n\nError if no objective function is set\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.owner_model-Tuple{GSOpt.GPVariable}","page":"API Reference","title":"JuMP.owner_model","text":"JuMP.owner_model(v::GPVariable) -> GPModel\n\nReturns the model that owns this variable.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.owner_model-Tuple{GSOpt.SPVariable}","page":"API Reference","title":"JuMP.owner_model","text":"JuMP.owner_model(v::SPVariable) -> SPModel\n\nReturns the model that owns this variable.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.set_objective-Tuple{GPModel, MathOptInterface.OptimizationSense, GSOpt.AbstractGPExpression}","page":"API Reference","title":"JuMP.set_objective","text":"JuMP.set_objective(model::GPModel, sense::MOI.OptimizationSense, func::AbstractGPExpression)\n\nSets the objective function for the geometric programming model.\n\nArguments\n\nmodel::GPModel: The geometric programming model\nsense::MOI.OptimizationSense: The optimization sense (MINSENSE or MAXSENSE)\nfunc::AbstractGPExpression: The objective function (must be a posynomial for minimization or a monomial for maximization)\n\nThrows\n\nError if the objective function is not compatible with the optimization sense\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.set_objective-Tuple{SPModel, MathOptInterface.OptimizationSense, GSOpt.AbstractGPExpression}","page":"API Reference","title":"JuMP.set_objective","text":"JuMP.set_objective(model::SPModel, sense::MOI.OptimizationSense, func::AbstractGPExpression)\n\nSets the objective function for the signomial programming model.\n\nArguments\n\nmodel::SPModel: The signomial programming model\nsense::MOI.OptimizationSense: The optimization sense (MINSENSE or MAXSENSE)\nfunc::AbstractGPExpression: The objective function (must be a signomial for minimization or a monomial for maximization)\n\nThrows\n\nError if the objective function is not compatible with the optimization sense\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.set_silent-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.set_silent","text":"JuMP.set_silent(model::AbstractSpGpModel)\n\nSets the model to silent mode, suppressing solver output.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.solve_time-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.solve_time","text":"JuMP.solve_time(model::AbstractSpGpModel) -> Float64\n\nReturns the time (in seconds) it took to solve the model.\n\nThrows\n\nError if the model has not been solved yet\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.termination_status-Tuple{GSOpt.AbstractSpGpModel}","page":"API Reference","title":"JuMP.termination_status","text":"JuMP.termination_status(model::AbstractSpGpModel) -> MOI.TerminationStatusCode\n\nReturns the termination status of the optimization.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuMP.value-Tuple{GSOpt.AbstractSPGPVariable}","page":"API Reference","title":"JuMP.value","text":"JuMP.value(var::AbstractSPGPVariable) -> Float64\n\nReturns the value of the variable after optimization.\n\nThrows\n\nError if the model has not been solved yet\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This section provides complete examples of how to use GSOpt.jl to solve various geometric programming problems.","category":"page"},{"location":"examples/#Basic-Example:-Rectangle-Design","page":"Examples","title":"Basic Example: Rectangle Design","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example finds the dimensions of a rectangle with minimum area, subject to constraints on perimeter and minimum area.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GSOpt\nusing SCS\nmodel = GPModel(optimizer=SCS.Optimizer)\nset_silent(model)\n\n@variable(model, w â‰¥ 0.1)  # width\n@variable(model, h â‰¥ 0.1)  # height\n\n@objective(model, Min, w * h) # minimize area\n\n@constraint(model, 2(w + h) â‰¤ 10)  # perimeter constraint\n@constraint(model, w * h â‰¥ 2)      # minimum area constraint\n\noptimize!(model)\n\nsolution_summary(model, verbose=true)","category":"page"},{"location":"examples/#Minimizing-a-Complex-Posynomial","page":"Examples","title":"Minimizing a Complex Posynomial","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example minimizes a complex posynomial objective function with both monomial equality and posynomial inequality constraints.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GSOpt\nusing SCS\n\nmodel = GPModel(optimizer=SCS.Optimizer)\nset_silent(model)\n\n@variable(model, x â‰¥ 0.1)\n@variable(model, y â‰¥ 0.1)\n@variable(model, z â‰¥ 0.1)\n\n@objective(model, Min, 1/(x * y * z) + x * y * z)\n\n@constraint(model, x * y * z == 1)\n@constraint(model, 2x + 3y + 4z â‰¤ 10)\n\noptimize!(model)\n\nsolution_summary(model, verbose=true)","category":"page"},{"location":"examples/#Maximizing-a-Monomial","page":"Examples","title":"Maximizing a Monomial","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example maximizes a monomial objective function with posynomial inequality constraints.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GSOpt\nusing SCS\n\nmodel = GPModel(optimizer=SCS.Optimizer)\nset_silent(model)\n\n@variable(model, x â‰¥ 0.1)\n@variable(model, y â‰¥ 0.1)\n\n@objective(model, Max, x * y)\n\n@constraint(model, 3x + 4y â‰¤ 10)\n@constraint(model, x â‰¤ 5)\n@constraint(model, y â‰¤ 5)\n\noptimize!(model)\n\nsolution_summary(model, verbose=true)","category":"page"},{"location":"examples/#Signomial-Program","page":"Examples","title":"Signomial Program","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GSOpt\nusing SCS\n\nmodel = SPModel(optimizer = SCS.Optimizer)\nJuMP.set_silent(model)\n\n@variable(model, x â‰¥ 0.1)\n@variable(model, y â‰¥ 0.1)\n@variable(model, z â‰¥ 0.1)\n\n@objective(model, Max, 2 * x) # maximize monomial\n\n@constraint(model, x * y * z == 10)  # monomial equality constraint\n@constraint(model, 2x + 3y - 4z â‰¤ 1.0)  # signomial inequality constraint\n\noptimize!(model)\n\nsolution_summary(model, verbose=true)","category":"page"},{"location":"examples/#Engineering-Example:-Cantilever-Beam-Design","page":"Examples","title":"Engineering Example: Cantilever Beam Design","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example optimizes the design of a cantilever beam to minimize its weight while satisfying constraints on deflection and stress.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GSOpt\nusing SCS\n\nmodel = GPModel(optimizer=SCS.Optimizer)\nset_silent(model)\n\n# Parameters\nE = 200e9      # Young's modulus (Pa)\nÏƒ_max = 100e6  # Maximum stress (Pa)\nÎ´_max = 0.005  # Maximum deflection (m)\nL = 1.0        # Length (m)\nF = 10e3       # Applied force (N)\n\n# Variables\n@variable(model, h â‰¥ 0.01)  # Height (m)\n@variable(model, b â‰¥ 0.01)  # Width (m)\n\n# Objective: minimize volume (proportional to weight)\n@objective(model, Min, b * h * L)\n\n# Stress constraint\n@constraint(model, 6*F*L/(b*h^2) â‰¤ Ïƒ_max)\n\n# Deflection constraint\n@constraint(model, 4*F*L^3/(E*b*h^3) â‰¤ Î´_max)\n\noptimize!(model)\n\nsolution_summary(model, verbose=true)","category":"page"},{"location":"#GSOpt.jl","page":"Home","title":"GSOpt.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Geometric and Signomial Programming for JuMP","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GSOpt.jl is a Julia package that extends JuMP to solve geometric programming (GP) and signomial programming (SP) problems.","category":"page"},{"location":"#Related-Packages","page":"Home","title":"Related Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GPKit: A Python package for geometric and signomial programming.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install it from the registry","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GSOpt","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GSOpt\nusing SCS\n\n# Create a geometric programming model\nmodel = GPModel(optimizer=SCS.Optimizer)\nset_silent(model)\n\n# Define variables\n@variable(model, x â‰¥ 0.1)\n@variable(model, y â‰¥ 0.1)\n@variable(model, z â‰¥ 0.1)\n\n# Define objective (minimize a posynomial)\n@objective(model, Min, 1/(x * y * z) + x * y * z)\n\n# Add constraints\n@constraint(model, x * y * z == 1)  # monomial equality constraint\n@constraint(model, 2x + 3y + 4z â‰¤ 10)  # posynomial inequality constraint\n\n# Solve the problem\noptimize!(model)\n\n# Get the solution\nsolution_summary(model, verbose=true)","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For more detailed information, please refer to the following sections:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Getting Started - Introduction to geometric programming with GSOpt.jl\nExamples - Complete examples of geometric programming problems\nAPI Reference - Detailed documentation of all exported functions and types","category":"page"},{"location":"overview/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"overview/getting_started/#Introduction-to-Geometric-Programming","page":"Getting Started","title":"Introduction to Geometric Programming","text":"","category":"section"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"Geometric programming (GP) is a type of mathematical optimization problem where the objective function and constraints are expressed in terms of monomials and posynomials.","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"A monomial is a function of the form:","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"g(x) = c x_1^a_1 x_2^a_2 cdots x_n^a_n","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"where c  0 and a_i are real exponents.","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"A posynomial is a sum of monomials:","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"f(x) = sum_i=1^k c_i x_1^a_i1 x_2^a_i2 cdots x_n^a_in","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"where c_i  0 and a_ij are real exponents.","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"A geometric program has the form:","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"beginalign*\ntextmin  quad f_0(x) \ntextsubject to  quad f_i(x) leq 1 quad i = 1ldotsm \n quad g_j(x) = 1 quad j = 1ldotsp\nendalign*","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"where each f_i is a posynomial and each g_j is a monomial. This optimization problem is convex in log-space. GSOpt.jl transforms the problem to log-space and solves it using a convex optimizer and then transforms the results back to non-log space for you.","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"For more information, see A Tutorial on Geometric Programming by Boyd et al. (2007).","category":"page"},{"location":"overview/getting_started/#Signomial-Programming","page":"Getting Started","title":"Signomial Programming","text":"","category":"section"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"For signomial programming, the same type of model is used, but some of the constraints can be signomials.","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"beginalign*\ntextmin  quad f(x) \ntextsubject to  quad p_i(x) leq q_i(x) quad i = 1ldotsm \n quad g_j(x) = 1 quad j = 1ldotsp\nendalign*","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"where each f is a posynomial, and each p_i and q_i are posynomials, and each g_j is a monomial. This optimization problem is no longer convex in log-space, meaning a global solution is no longer guaranteed. GSOpt.jl solves these types of problems iteratively, by solving a GP subproblem that is convex in log-space.","category":"page"},{"location":"overview/getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"To use GSOpt.jl, you need to have Julia installed. Then, you can add GSOpt.jl to your project:","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"using GSOpt","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"You'll also need a solver that can handle exponential cones. We recommend SCS:","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"using SCS","category":"page"},{"location":"overview/getting_started/#Basic-Usage","page":"Getting Started","title":"Basic Usage","text":"","category":"section"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here's a simple example of how to use GSOpt.jl:","category":"page"},{"location":"overview/getting_started/","page":"Getting Started","title":"Getting Started","text":"using GSOpt\nusing SCS\n\nmodel = GPModel(optimizer=SCS.Optimizer)\n\n@variable(model, x â‰¥ 0.1)\n@variable(model, y â‰¥ 0.1)\n\n@objective(model, Min, x + y + x*y)\n\n@constraint(model, x * y â‰¥ 1)    # monomial inequality\n@constraint(model, x / y â‰¤ 2)    # ratio constraint\n\noptimize!(model)\n\nsolution_summary(model)","category":"page"}]
}
